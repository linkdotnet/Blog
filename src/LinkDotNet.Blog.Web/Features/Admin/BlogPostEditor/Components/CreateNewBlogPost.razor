@using LinkDotNet.Blog.Domain

<h3>@Title</h3>

<div class="content-area">
    <div class="new-content">
        <EditForm Model="@model" OnValidSubmit="OnValidBlogPostCreatedAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label for="title">Title</label>
                <input class="form-control" id="title"
                           @oninput="args => model.Title = args.Value.ToString()" value="@model.Title"/>
            </div>
            <div class="mb-3">
                <label for="short">Short Description</label>
                <TextAreaWithShortcuts Id="short" Class="form-control" Rows="4"
                                       @bind-Value="@model.ShortDescription"></TextAreaWithShortcuts>
                <small for="short" class="form-text text-muted">You can use markdown to style your component</small>
            </div>
            <div class="mb-3">
                <label for="content">Content</label>
                <TextAreaWithShortcuts Id="content" Class="form-control" Rows="10"
                                       @bind-Value="@model.Content"></TextAreaWithShortcuts>
                <small for="content" class="form-text text-muted">You can use markdown to style your component. Additional features and keyboard shortcuts are listed <a @onclick="@(() => FeatureDialog.Open())">here</a></small>
                <UploadFile OnFileUploaded="SetContentFromFile" id="content-upload"></UploadFile>
                <small for="content-upload" class="form-text text-muted">Drag and drop markdown files to upload and
                insert them</small>
            </div>
            <div class="mb-3">
                <label for="preview">Preview-Url</label>
                <InputText class="form-control" id="preview" @bind-Value="model.PreviewImageUrl"/>
                <small for="preview" class="form-text text-muted">The primary image which will be used.</small>
            </div>
            <div class="mb-3">
                <label for="preview">Fallback Preview-Url</label>
                <InputText class="form-control" id="fallback-preview" @bind-Value="model.PreviewImageUrlFallback"/>
                <small for="fallback-preview" class="form-text text-muted">Optional: Used as a fallback if the preview image can't be used by the browser.
                    <br>For example using a jpg or png as fallback for avif which is not supported in Safari or Edge.</small>
            </div>
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="published" @bind-Value="model.IsPublished" />
                <label class="form-check-label" for="published">Publish</label><br/>
                <small for="published" class="form-text text-muted">If this blog post is only draft uncheck the box</small>
            </div>
            <div class="mb-3">
                <label for="tags">Tags</label>
                <InputText class="form-control" id="tags" @bind-Value="model.Tags"/>
            </div>
            @if (BlogPost != null)
            {
                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="updatedate" @bind-Value="model.ShouldUpdateDate" />
                    <label class="form-check-label" for="updatedate">Update Publish Date?</label><br/>
                    <small for="updatedate" class="form-text text-muted">If set the publish date is set to now,
                    otherwise its original date</small>
                </div>
            }
            <button class="btn btn-primary" type="submit">Submit</button>
        </EditForm>
    </div>
    <div class="preview">
        <div>
            <header>
                <h1>@model.Title</h1>
            </header>
            <div>
                @(MarkdownConverter.ToMarkupString(model.ShortDescription))
            </div>
            <div>
                @(MarkdownConverter.ToMarkupString(model.Content))
            </div>
        </div>
    </div>
</div>
<FeatureInfoDialog @ref="FeatureDialog"></FeatureInfoDialog>

<NavigationLock ConfirmExternalNavigation="@model.IsDirty" OnBeforeInternalNavigation="PreventNavigationWhenDirty"></NavigationLock>
@code {
    [Parameter]
    public BlogPost BlogPost { get; set; }

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public EventCallback<BlogPost> OnBlogPostCreated { get; set; }

    [Parameter]
    public bool ClearAfterCreated { get; set; } = true;

    private FeatureInfoDialog FeatureDialog { get; set; }

    private CreateNewModel model = new();

    protected override void OnParametersSet()
    {
        if (BlogPost == null)
        {
            return;
        }

        model = CreateNewModel.FromBlogPost(BlogPost);
    }

    private async Task OnValidBlogPostCreatedAsync()
    {
        await OnBlogPostCreated.InvokeAsync(model.ToBlogPost());
        ClearModel();
    }

    private void ClearModel()
    {
        if (ClearAfterCreated)
        {
            model = new CreateNewModel();
        }
    }

    private void SetContentFromFile(string content)
    {
        model.Content = content;
    }

    private void PreventNavigationWhenDirty(LocationChangingContext context)
    {
        if (model.IsDirty)
            context.PreventNavigation();
    }
}