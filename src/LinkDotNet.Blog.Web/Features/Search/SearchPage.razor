@page "/search/{searchTerm}"
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure
@using LinkDotNet.Blog.Infrastructure.Persistence
@inject IRepository<BlogPost> BlogPostRepository

<h3>Results for @SearchTerm</h3>

<div class="content px-4">
    @for (var i = 0; i < blogPosts.Count; i++)
    {
        <ShortBlogPost BlogPost="blogPosts[i]" UseAlternativeStyle="@(i % 2 != 0)"></ShortBlogPost>
    }
</div>
@code {
    [Parameter, EditorRequired]
    public required string SearchTerm { get; set; }

    private IReadOnlyList<BlogPost> blogPosts = PagedList<BlogPost>.Empty;

    protected override async Task OnParametersSetAsync()
    {
        var term = Uri.UnescapeDataString(SearchTerm);
        blogPosts = await BlogPostRepository.GetAllAsync(t => t.IsPublished && (t.Title.Contains(term)
                                                                                || t.Tags.Any(tag => tag == term)),
            b => b.UpdatedDate);
    }
}
