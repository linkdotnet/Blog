@using System.Net
@using System.Text.RegularExpressions
@using System.Web
@using LinkDotNet.Blog.Domain
<article>
  <div class="blog-card @AltCssClass">
    <div class="meta">
      <div class="photo">
        <PreviewImage PreviewImageUrl="@BlogPost.PreviewImageUrl"
                      PreviewImageUrlFallback="@BlogPost.PreviewImageUrlFallback"
                      LazyLoadImage="@LazyLoadPreviewImage"></PreviewImage>
      </div>
      <ul class="details">
        <li class="date me-4"><span>@BlogPost.UpdatedDate.ToString("dd/MM/yyyy")</span></li>
        @if (BlogPost.Tags != null && BlogPost.Tags.Any())
        {
          <li class="tags me-4">
            <ul>
              @foreach (var tag in BlogPost.Tags.Select(t => t.Content))
              {
                <li><a class="goto-tag" href="/searchByTag/@(Uri.EscapeDataString(tag))">@tag</a></li>
              }
            </ul>
          </li>
        }
        <li class="read-time me-4">@readTime min</li>
      </ul>
    </div>
    <div class="description">
      <h1>@BlogPost.Title</h1>
      <h2></h2>
      <p>@MarkdownConverter.ToMarkupString(BlogPost.ShortDescription)</p>
      <p class="read-more">
        <a href="/blogPost/@BlogPost.Id" aria-label="@BlogPost.Title">Read the whole article</a>
      </p>
    </div>
  </div>
</article>

@code {
    [Parameter]
    public BlogPost BlogPost { get; set; }

    [Parameter]
    public bool UseAlternativeStyle { get; set; }

    [Parameter]
    public bool LazyLoadPreviewImage { get; set; }

    private string AltCssClass => UseAlternativeStyle ? "alt" : string.Empty;

    private int readTime;

    protected override void OnInitialized()
    {
      var images = GetAllOccurrences(MarkdownConverter.ToMarkupString(BlogPost.Content).Value, "<img");
      var words = BlogPost.Content.Split(Array.Empty<char>(), StringSplitOptions.RemoveEmptyEntries).Length;

        var readTimeInPrecision = images * 15 + words / 3.333;
        readTime = (int)Math.Ceiling(readTimeInPrecision / 60);
    }

    private int GetAllOccurrences(ReadOnlySpan<char> text, ReadOnlySpan<char> lookup)
    {
        var currentPosition = 0;
        int lastPosition;
        var count = 0;

        while ((lastPosition = text[currentPosition..].IndexOf(lookup, StringComparison.Ordinal)) != -1)
        {
          count++;
          currentPosition += lastPosition + lookup.Length;
        }

        return count;
    }
}
