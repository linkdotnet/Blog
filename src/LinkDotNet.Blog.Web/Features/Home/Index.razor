@page "/"
@page "/{page:int}"
@using Markdig
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Features.Home.Components
@using Microsoft.Extensions.Caching.Memory
@using Microsoft.Extensions.Options
@inject IMemoryCache MemoryCache
@inject IRepository<BlogPost> BlogPostRepository
@inject IOptions<Introduction> Introduction
@inject IOptions<ApplicationConfiguration> AppConfiguration
@inject NavigationManager NavigationManager


<OgData Title="@(Markdown.ToPlainText(AppConfiguration.Value.BlogName))"
        AbsolutePreviewImageUrl="@ImageUrl"
        Description="@(Markdown.ToPlainText(Introduction.Value.Description))"></OgData>
<section>
    <IntroductionCard></IntroductionCard>
</section>

<section>
    <header>
        <div class="text-center pt-2">
            <h1 class="m-auto align-middle pt-4 pb-3">Recent Posts</h1>
        </div>
    </header>
    <div class="content px-4 my-2">
    @for (var i = 0; i < currentPage.Count; i++)
    {
        <ShortBlogPost BlogPost="currentPage[i]" UseAlternativeStyle="@(i % 2 != 0)" LazyLoadPreviewImage="i > 2"></ShortBlogPost>
    }
    </div>
    <BlogPostNavigation PageList="@currentPage"></BlogPostNavigation>
</section>

@code {
    [Parameter]
    public int? Page { get; set; }

    private IPagedList<BlogPost> currentPage = PagedList<BlogPost>.Empty;

    private string ImageUrl => Introduction.Value.ProfilePictureUrl.ToAbsoluteUrl(NavigationManager.BaseUri);

    protected override async Task OnParametersSetAsync()
    {
	    const string firstPageCacheKey = "BlogPostList";
        if (Page is null or < 1)
        {
            Page = 1;
        }

	    // The hot path is that users land on the initial page which is the first page.
	    // So we want to cache that page for a while to reduce the load on the database
	    // and to speed up the page load.
		// That will lead to stale blog posts for 5 minutes for the first page,
		// but I am fine with that (as publishing isn't super critical).
		// It might be tackled in the future (for example invalidate option via Admin UI).
	    if (Page == 1)
	    {
		    currentPage = await MemoryCache.GetOrCreateAsync(firstPageCacheKey, async entry =>
		    {
			    entry.AbsoluteExpirationRelativeToNow = TimeSpan.FromMinutes(5);
			    return await GetAllForPageAsync(Page.Value);
		    });
		    return;
	    }

        currentPage = await GetAllForPageAsync(Page.Value);
    }

	private ValueTask<IPagedList<BlogPost>> GetAllForPageAsync(int page)
		=> BlogPostRepository.GetAllAsync(
		p => p.IsPublished,
		b => b.UpdatedDate,
		pageSize: AppConfiguration.Value.BlogPostsPerPage,
		page: page);
}
