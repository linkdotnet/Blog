@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.PersistenceË˜
@inject IRepository<BlogPost> BlogPostRepository
@inject IRepository<SimilarBlogPost> SimilarBlogPostJobRepository

@if (similarBlogPosts.Count > 0)
{
	<div class="accordion my-5" id="archiveAccordion">
		<div class="accordion-item">
			<h2 class="accordion-header" id="headingOne">
				<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
					Want to read more? Check out these related blog posts!
				</button>
			</h2>
			<div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
				<div class="row p-4">
					@foreach (var relatedBlogPost in similarBlogPosts)
					{
						<div class="col pt-2">
							<div class="card h-100">
								<div class="card-body">
									<h5 class="card-title fw-bold">@relatedBlogPost.Title</h5>
									<p class="card-text">@MarkdownConverter.ToMarkupString(relatedBlogPost.ShortDescription)</p>
								</div>
								<a href="blogPost/@relatedBlogPost.Id/@relatedBlogPost.Slug" class="stretched-link"></a>
							</div>
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}

@code {
	[Parameter] public BlogPost BlogPost { get; set; }

	private IReadOnlyCollection<BlogPost> similarBlogPosts = [];

	protected override async Task OnParametersSetAsync()
	{
		var similarBlogPostIds = await SimilarBlogPostJobRepository.GetByIdAsync(BlogPost.Id);
		if (similarBlogPostIds is not null)
		{
			similarBlogPosts = await BlogPostRepository.GetAllAsync(
				b => similarBlogPostIds.SimilarBlogPostIds.Contains(b.Id));
		}
	}
}
