@page "/"
@page "/{page:int}"
@using Markdig
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Features.Services
@using LinkDotNet.Blog.Web.Features.Home.Components
@inject IRepository<BlogPost> BlogPostRepository
@inject AppConfiguration AppConfiguration
@inject NavigationManager NavigationManager
@inject IUserRecordService UserRecordService

<OgData Title="@(Markdown.ToPlainText(AppConfiguration.BlogName))"
        AbsolutePreviewImageUrl="@ImageUrl"
        Description="@(Markdown.ToPlainText(AppConfiguration.Introduction.Description))"></OgData>
<section>
    <IntroductionCard></IntroductionCard>
</section>

<section>
    <header>
        <div class="text-center pt-2">
            <h1 class="m-auto align-middle pt-4 pb-3">Recent Posts</h1>
        </div>
    </header>
    <div class="content px-4 my-2">
    @for (var i = 0; i < currentPage.Count; i++)
    {
        <ShortBlogPost BlogPost="currentPage[i]" UseAlternativeStyle="@(i % 2 != 0)" LazyLoadPreviewImage="i > 2"></ShortBlogPost>
    }
    </div>
    <BlogPostNavigation PageList="@currentPage"></BlogPostNavigation>
</section>

@code {
    [Parameter]
    public int? Page { get; set; }

    private IPaginatedList<BlogPost> currentPage = PaginatedList<BlogPost>.Empty;

    private string ImageUrl => AppConfiguration.Introduction.ProfilePictureUrl.ToAbsoluteUrl(NavigationManager.BaseUri);

    protected override async Task OnParametersSetAsync()
    {
        if (Page is null or < 1)
        {
            Page = 1;
        }

        currentPage = await BlogPostRepository.GetAllAsync(
            p => p.IsPublished,
            b => b.UpdatedDate,
            pageSize: AppConfiguration.BlogPostsPerPage,
            page: Page.Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await UserRecordService.StoreUserRecordAsync();
        }
    }
}
