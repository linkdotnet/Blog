@using System.Linq.Expressions
@using Microsoft.EntityFrameworkCore
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Infrastructure.Persistence.Sql
@using System.Collections.Immutable
@inject IRepository<BlogPost> BlogPostRepository
@inject IRepository<BlogPostRecord> BlogPostRecordRepository

<div class="card">
    <div class="card-header">Blog Post Visit Counts</div>
    <div class="card-body">
        <div class="row">
            <DateRangeSelector FilterChanged="RefreshVisitCount"></DateRangeSelector>
            @if (visitData != null)
            {
                <p id="total-clicks">@visitData.Sum(c => c.ClickCount) clicks in total</p>
            }
            else
            {
                <p id="total-clicks">Loading...</p>
            }
            <table class="table table-striped table-hover table-active" style="table-layout: fixed">
                <tbody>
                <tr>
                    <th>Title</th>
                    <th>Clicks</th>
                    <th>Likes</th>
                </tr>
                @if (visitData != null)
                {
                    @foreach (var date in visitData)
                    {
                        <tr>
                            <td><a class="link" href="blogPost/@date.Id">@date.Title</a></td>
                            <td>@date.ClickCount</td>
                            <td>@date.Likes</td>
                        </tr>
                    }
                }
                else
                {
                    <Loading></Loading>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private Filter filter = new();
    private IReadOnlyCollection<VisitCountPageData> visitData;

    protected override async Task OnInitializedAsync()
    {
        visitData = await LoadBlogPostInformationAsync();
    }

    private async Task<IReadOnlyCollection<VisitCountPageData>> LoadBlogPostInformationAsync()
    {
	    var blogPosts = await BlogPostRepository.GetAllByProjectionAsync(
	        s => new { s.Id, s.Title, s.Likes });
        var userRecords = await BlogPostRecordRepository.GetAllAsync(
	        ur => (!filter.StartDate.HasValue || ur.DateClicked >= filter.StartDate)
	              && (!filter.EndDate.HasValue || ur.DateClicked <= filter.EndDate));

	    return userRecords
		    .GroupBy(s => s.BlogPostId)
		    .Select(s => new { BlogPostId = s.Key, Count = s.Sum(l => l.Clicks) })
		    .OrderByDescending(s => s.Count)
		    .Join(blogPosts, ur => ur.BlogPostId, bp => bp.Id, (ur, bp) => new VisitCountPageData()
		    {
			    Id = bp.Id,
			    Likes = bp.Likes,
			    Title = bp.Title,
			    ClickCount = ur.Count,
		    })
		    .ToImmutableArray();
    }

    private async Task RefreshVisitCount(Filter newBeginning)
    {
        filter = newBeginning;
        visitData = await LoadBlogPostInformationAsync();
    }
}
