@page "/archive"
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Domain
@using System.Collections.Immutable
@using System.Globalization
@inject IRepository<BlogPost> Repository

<OgData Title="Archive" Description="Explore all blog posts."></OgData>

<div class="container">
	<h3 class="pb-3 fw-bold">Archive (@blogPostCount posts)</h3>

	@if (blogPostsPerYear is null)
	{
		<Loading></Loading>
	}
	else
	{
		<div class="accordion" id="archiveAccordion">
			@foreach (var yearGroup in blogPostsPerYear)
			{
				<div class="accordion-item">
					<h2 class="accordion-header" id="@HeadingKey(yearGroup.Key)">
						<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="@CollapseKeyIdentifier(yearGroup.Key)" aria-expanded="true" aria-controls="@CollapseKey(yearGroup.Key)">
							@yearGroup.Key <span class="badge bg-primary ms-2">@yearGroup.Count()</span>
						</button>
					</h2>
					<div id="@CollapseKey(yearGroup.Key)" class="accordion-collapse collapse show" aria-labelledby="@HeadingKey(yearGroup.Key)">
						<div class="accordion-body">
							<ul class="list-group">
								@foreach (var blogPost in yearGroup.OrderByDescending(b => b.UpdatedDate))
								{
									<li class="list-group-item">
										<a href="/blogPost/@blogPost.Id/@blogPost.Slug" class="text-decoration-none">@blogPost.Title</a>
										<span class="text-muted small ps-2">(@blogPost.UpdatedDate.ToString("MMM dd, yyyy", CultureInfo.CurrentCulture))</span>
									</li>
								}
							</ul>
						</div>
					</div>
				</div>
			}
		</div>
	}
</div>

@code {
	private IReadOnlyCollection<IGrouping<int, BlogPostPerYear>>? blogPostsPerYear;
	private int blogPostCount;

	protected override async Task OnInitializedAsync()
	{
		var blogPosts = await Repository.GetAllByProjectionAsync(
			p => new BlogPostPerYear(p.Id, p.Slug, p.Title, p.UpdatedDate),
			p => p.IsPublished);

		blogPostCount = blogPosts.Count;
		blogPostsPerYear = blogPosts
			.GroupBy(r => r.UpdatedDate.Year)
			.OrderByDescending(r => r.Key)
			.ToImmutableArray();
	}

	private static string HeadingKey(int year) => $"heading{year}";
	private static string CollapseKey(int year) => $"collapse{year}";
	private static string CollapseKeyIdentifier(int year) => $"#{CollapseKey(year)}";

	private sealed record BlogPostPerYear(string Id, string Slug, string Title, DateTime UpdatedDate);
}
