@using System.Security.Cryptography
<div class="m-auto text-center">
    <h1 class="fs-1">404 - o((‚äôÔπè‚äô))o</h1>
    <br />
    <p>I really looked hard but I couldn't find the page you are looking for.</p>
    <p>Go back to <a href="/">safety</a></p>
    <hr />
    <h3>Play a Number Guessing Game</h3>
    <p>Since you are here, why not play a number guessing game?</p>

    @if (!isGameStarted)
    {
        <p>Select a difficulty level to start:</p>
        <div class="btn-group mb-3" role="group">
            <button class="btn btn-success" @onclick="() => StartGame(DifficultyLevel.Easy)">Easy</button>
            <button class="btn btn-warning" @onclick="() => StartGame(DifficultyLevel.Medium)">Medium</button>
            <button class="btn btn-danger" @onclick="() => StartGame(DifficultyLevel.Hard)">Hard</button>
        </div>
    }
    else
    {
        <p>I'm thinking of a number between 1 and @maxNumber. Can you guess it?</p>
        <p>You have <strong>@remainingGuesses</strong> guesses left.</p>
        <div class="input-group mb-3 w-25 mx-auto">
            <input type="number" class="form-control" @bind="userGuess" min="1" max="@maxNumber" @onkeyup="HandleKeyPress" />
            <button class="btn btn-primary" @onclick="CheckGuess">Guess</button>
        </div>
        <p>Total guesses: <strong>@guessCount</strong></p>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert @alertClass mt-3" role="alert">
                @message
            </div>
            @if (gameDone)
            {
                <button class="btn btn-success mt-3" @onclick="ResetGame">Play Again</button>
            }
        }
    }
</div>

@code {
    private int targetNumber;
    private int userGuess;
    private int guessCount;
    private int maxNumber;
    private int maxGuesses;
    private int remainingGuesses;
    private string message = string.Empty;
    private string alertClass = "";
    private bool gameDone = false;
    private bool isGameStarted = false;

    private enum DifficultyLevel
    {
        Easy,
        Medium,
        Hard
    }

    private void StartGame(DifficultyLevel difficulty)
    {
        isGameStarted = true;
        gameDone = false;
        guessCount = 0;
        message = string.Empty;
        userGuess = 0;

        switch (difficulty)
        {
            case DifficultyLevel.Easy:
                maxNumber = 10;
                maxGuesses = 3;
                break;
            case DifficultyLevel.Medium:
                maxNumber = 100;
                maxGuesses = 7;
                break;
            case DifficultyLevel.Hard:
                maxNumber = 1000;
                maxGuesses = 10;
                break;
            default:
	            throw new ArgumentOutOfRangeException(nameof(difficulty), difficulty, null);
        }

        remainingGuesses = maxGuesses;
        targetNumber = RandomNumberGenerator.GetInt32(1, maxNumber + 1);
    }

    private void CheckGuess()
    {
        if (gameDone || !isGameStarted)
            return;

        if (userGuess < 1 || userGuess > maxNumber)
        {
            message = $"Please enter a number between 1 and {maxNumber}.";
            alertClass = "alert-warning";
            return;
        }

        guessCount++;
        remainingGuesses--;

        int difference = Math.Abs(userGuess - targetNumber);
        double proximity = (double)difference / maxNumber;

        if (userGuess == targetNumber)
        {
            gameDone = true;
            message = "üéâ Congratulations! You guessed the number!";
            alertClass = "alert-success";
        }
        else if (remainingGuesses == 0)
        {
            gameDone = true;
            message = $"üòû Game over! You've run out of guesses. The number was {targetNumber}.";
            alertClass = "alert-danger";
        }
        else
        {
	        switch (proximity)
	        {
		        case < 0.05:
			        message = "üî• Scalding Hot!";
			        alertClass = "alert-danger";
			        break;
		        case < 0.1:
			        message = "üå°Ô∏è Very Hot!";
			        alertClass = "alert-warning";
			        break;
		        case < 0.2:
			        message = "üåû Warm.";
			        alertClass = "alert-info";
			        break;
		        case < 0.3:
			        message = "üå§Ô∏è Cool.";
			        alertClass = "alert-secondary";
			        break;
		        default:
			        message = "‚ùÑÔ∏è Cold!";
			        alertClass = "alert-secondary";
			        break;
	        }
        }
    }

    private void ResetGame()
    {
        isGameStarted = false;
        gameDone = false;
        message = string.Empty;
        alertClass = "";
        userGuess = 0;
        guessCount = 0;
        remainingGuesses = 0;
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !gameDone && isGameStarted)
        {
            CheckGuess();
        }
    }
}
