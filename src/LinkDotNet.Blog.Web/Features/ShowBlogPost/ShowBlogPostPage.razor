@page "/blogPost/{blogPostId}/{slug?}"
@using Markdig
@using LinkDotNet.Blog.Domain
@using LinkDotNet.Blog.Infrastructure.Persistence
@using LinkDotNet.Blog.Web.Features.Services
@using LinkDotNet.Blog.Web.Features.ShowBlogPost.Components
@inject IRepository<BlogPost> BlogPostRepository
@inject IJSRuntime JsRuntime
@inject IUserRecordService UserRecordService
@inject IOptions<ApplicationConfiguration> AppConfiguration
@inject IOptions<ProfileInformation> ProfileInformation

@if (isLoading)
{
    <Loading></Loading>
}
else if (!isLoading && BlogPost is null)
{
	<div class="m-auto text-center" id="no-blog-post-error">
		<h1 class="fs-1">404 - o((⊙﹏⊙))o</h1>
		<br/>
		<p>I really looked hard but I couldn't find the page you are looking for.</p>
		<p>Go back to <a href="/">safety</a></p>
	</div>
}
else
{
    <PageTitle>@BlogPost.Title</PageTitle>
	<OgData Title="@BlogPost.Title"
	        AbsolutePreviewImageUrl="@OgDataImage"
	        Description="@(Markdown.ToPlainText(BlogPost.ShortDescription))"
	        Keywords="@BlogPost.TagsAsString"
	        CanonicalRelativeUrl="@BlogPostCanoncialUrl">
		<StructuredData Headline="@BlogPost.Title"
		                PreviewImage="@BlogPost.PreviewImageUrl"
		                PreviewFallbackImage="@BlogPost.PreviewImageUrlFallback"
		                PublishedDate="@BlogPost.UpdatedDate"
		                Author="@ProfileInformation.Value.Name"/>
	</OgData>

	<div class="d-flex justify-content-center pt-2 blog-outer-box">
		<div class="blog-container">
			<div class="blog-inner-content">
				<header class="text-center">
					<h1 class="fw-bold">@BlogPost.Title</h1></header>
				<div class="text-dark-emphasis d-flex flex-wrap gap-2">
					<div class="me-2">
						<span class="date"></span>
						<span class="ms-1">@BlogPost.UpdatedDate.ToString("dd/MM/yyyy")</span>
					</div>
					@if (BlogPost.Tags is not null && BlogPost.Tags.Any())
					{
						<div class="d-flex align-items-center">
							<span class="blogpost-tag me-2"></span>
							<div class="d-flex flex-wrap gap-2">
								@foreach (var tag in BlogPost.Tags)
								{
									<a class="goto-tag badge bg-primary rounded-pill text-decoration-none" href="/searchByTag/@(Uri.EscapeDataString(tag))">@tag</a>
								}
							</div>
						</div>
					}
				</div>

				<div class="admin-action">
					<BlogPostAdminActions BlogPostId="@BlogPostId"></BlogPostAdminActions>
				</div>

				<div class="blogpost-content">
					@(MarkdownConverter.ToMarkupString(BlogPost.Content))
				</div>
			</div>
			<div class="d-flex justify-content-between py-2">
				<Like BlogPost="@BlogPost" OnBlogPostLiked="@UpdateLikes"></Like>
				<ShareBlogPost></ShareBlogPost>
			</div>
			<DonationSection></DonationSection>
			@if (AppConfiguration.Value.ShowSimilarPosts)
			{
				<SimilarBlogPostSection BlogPost="@BlogPost" />
			}
			<CommentSection></CommentSection>
		</div>
	</div>

	@if (AppConfiguration.Value.ShowReadingIndicator)
	{
		<ReadingIndicator ContainerCssSelector=".blog-inner-content"/>
	}
}

@code {
    [Parameter]
    public string BlogPostId { get; set; }

    [Parameter]
    public string Slug { get; set; }

    private bool isLoading;

	private string OgDataImage => BlogPost.PreviewImageUrlFallback ?? BlogPost.PreviewImageUrl;
	private string BlogPostCanoncialUrl => $"blogPost/{BlogPost.Id}";

    private BlogPost BlogPost { get; set; }

    protected override async Task OnParametersSetAsync()
    {
	    isLoading = true;
	    BlogPost = await BlogPostRepository.GetByIdAsync(BlogPostId);
	    isLoading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("hljs.highlightAll");
        _ = UserRecordService.StoreUserRecordAsync();
    }

    private async Task UpdateLikes(bool hasLiked)
    {
        BlogPost = await BlogPostRepository.GetByIdAsync(BlogPostId);
        BlogPost.Likes = hasLiked ? BlogPost.Likes + 1 : BlogPost.Likes - 1;
        await BlogPostRepository.StoreAsync(BlogPost);
    }
}
